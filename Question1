module _4to1mux(in,out,sel);
  input [3:0] in; 
  input [1:0] sel; 
  output out;
  wire a,b,c,d,n1,n2,a1,a2,a3,a4;
  not not1(n1,sel[1]); 
  not not2(n2,sel[0]);
  and (a1,in[0],n1,n2);
  and (a2,in[1],n2,sel[1]);
  and (a3,in[2],sel[0],n1); 
  and (a4,in[3],sel[0],sel[1]);
  or or1(out,a1,a2,a3,a4);
 endmodule
module _16to1mux(in,out,sel); 
  input [15:0] in; 
  input [3:0] sel;
 output out;
  wire [3:0] ma;
  _4to1mux mux1(in[3:0],ma[0],sel[3:2]);
  _4to1mux mux2(in[7:4],ma[1],sel[3:2]);
  _4to1mux mux3(in[11:8],ma[2],sel[3:2]);
  _4to1mux mux4(in[15:12],ma[3],sel[3:2]);
  _4to1mux mux5(ma,out,sel[1:0]);
endmodule

//testbench
module testmux_16; 
  reg [15:0] in;
  reg [3:0] sel; 
wire out;
_16to1mux mux(in,out,sel);
  initial 
begin
  $monitor("in=%b | sel=%b | out=%b",in,sel,out);
end
initial
begin
in=16'hFAC7; sel=4'b0000; 
#30 in=16'hFAC7; sel=4'b0001; 
#30 in=16'hFAC7; sel=4'b0010;
#30 in=16'hFAC7; sel=4'b0011;
#30 in=16'hFAC7; sel=4'b0100; 
#30 in=16'hFAC7; sel=4'b0101; 
#30 in=16'hFAC7; sel=4'b0110;
#30 in=16'hFAC7; sel=4'b0111;
#30 in=16'hFAC7; sel=4'b1000;
#30 in=16'hFAC7; sel=4'b1001;
#30 in=16'hFAC7; sel=4'b1010; 
#30 in=16'hFAC7; sel=4'b1011;
#30 in=16'hFAC7; sel=4'b1100; 
#30 in=16'hFAC7; sel=4'b1101; 
#30 in=16'hFAC7; sel=4'b1110; 
#30 in=16'hFAC7; sel=4'b1111;
end
endmodule
